//! Autogenerated weights for daos_agency
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
    // target/release/tico
    // benchmark
    // pallet
    // --execution=wasm
    // --chain
    // local
    // --wasm-execution=compiled
    // --pallet=daos_agency
    // --extrinsic=*
    // --steps=50
    // --repeat=20
    // --template=./.maintain/daos-weight-template.hbs
    // --output
    // ./pallets/daos/agency/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for daos_agency.
pub trait WeightInfo {
    fn execute() -> Weight;
    fn propose() -> Weight;
    fn vote() -> Weight;
    fn close() -> Weight;
    fn disapprove_proposal() -> Weight;
    fn set_motion_duration() -> Weight;
    fn set_max_proposals() -> Weight;
    fn set_max_members() -> Weight;
    fn set_ensure_origin_for_every_call() -> Weight;
}

/// Weights for daos_agency using the Substrate node and recommended hardware.
pub struct DaosWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for DaosWeight<T> {
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
        fn execute() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
        }
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency ProposalOf (r:1 w:1)
            // Storage: DaoAgency Proposals (r:1 w:1)
            // Storage: DaoAgency MaxProposals (r:1 w:0)
            // Storage: DaoAgency ProposalCount (r:1 w:1)
            // Storage: DaoAgency MotionDuration (r:1 w:0)
            // Storage: DaoAgency Voting (r:0 w:1)
        fn propose() -> Weight {
        (30_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency Voting (r:1 w:1)
        fn vote() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: DaoAgency Voting (r:1 w:1)
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency ProposalOf (r:1 w:1)
            // Storage: DaoAgency Proposals (r:1 w:1)
        fn close() -> Weight {
        (32_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency Proposals (r:1 w:1)
            // Storage: DaoAgency Voting (r:0 w:1)
            // Storage: DaoAgency ProposalOf (r:0 w:1)
        fn disapprove_proposal() -> Weight {
        (20_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MotionDuration (r:0 w:1)
        fn set_motion_duration() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MaxProposals (r:0 w:1)
        fn set_max_proposals() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MaxMembers (r:0 w:1)
        fn set_max_members() -> Weight {
        (15_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency EnsureOrigins (r:0 w:1)
        fn set_ensure_origin_for_every_call() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
        fn execute() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
        }
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency ProposalOf (r:1 w:1)
            // Storage: DaoAgency Proposals (r:1 w:1)
            // Storage: DaoAgency MaxProposals (r:1 w:0)
            // Storage: DaoAgency ProposalCount (r:1 w:1)
            // Storage: DaoAgency MotionDuration (r:1 w:0)
            // Storage: DaoAgency Voting (r:0 w:1)
        fn propose() -> Weight {
        (30_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(6 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency Voting (r:1 w:1)
        fn vote() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: DaoAgency Voting (r:1 w:1)
            // Storage: DaoAgency CollectiveMembers (r:1 w:0)
            // Storage: DaoAgency ProposalOf (r:1 w:1)
            // Storage: DaoAgency Proposals (r:1 w:1)
        fn close() -> Weight {
        (32_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency Proposals (r:1 w:1)
            // Storage: DaoAgency Voting (r:0 w:1)
            // Storage: DaoAgency ProposalOf (r:0 w:1)
        fn disapprove_proposal() -> Weight {
        (20_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MotionDuration (r:0 w:1)
        fn set_motion_duration() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MaxProposals (r:0 w:1)
        fn set_max_proposals() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency MaxMembers (r:0 w:1)
        fn set_max_members() -> Weight {
        (15_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoAgency EnsureOrigins (r:0 w:1)
        fn set_ensure_origin_for_every_call() -> Weight {
        (16_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
    }