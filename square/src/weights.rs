//! Autogenerated weights for daos_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
    // ./target/release/tico
    // benchmark
    // pallet
    // --chain
    // local
    // --steps=50
    // --repeat=20
    // --pallet=daos_democracy
    // --extrinsic=*
    // --template=./.maintain/pallet-weight-template.hbs
    // --output
    // ./pallets/daos/square/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for daos_democracy.
pub trait WeightInfo {
    fn propose() -> Weight;
    fn second() -> Weight;
    fn open_table() -> Weight;
    fn vote_for_referendum() -> Weight;
    fn cancel_vote() -> Weight;
    fn enact_proposal() -> Weight;
    fn unlock() -> Weight;
    fn set_min_vote_weight_for_every_call() -> Weight;
    fn set_max_public_props() -> Weight;
    fn set_launch_period() -> Weight;
    fn set_minimum_deposit() -> Weight;
    fn set_voting_period() -> Weight;
    fn set_rerserve_period() -> Weight;
    fn set_enactment_period() -> Weight;
}

/// Weights for daos_democracy using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
            // Storage: System Account (r:1 w:1)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinimumDeposit (r:1 w:0)
            // Storage: DaoDemocracy PublicPropCount (r:1 w:1)
            // Storage: DaoDemocracy PublicProps (r:1 w:1)
            // Storage: DaoDemocracy MaxPublicProps (r:1 w:0)
            // Storage: DaoDemocracy DepositOf (r:0 w:1)
        fn propose() -> Weight {
        (29_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoDemocracy DepositOf (r:1 w:1)
            // Storage: System Account (r:1 w:1)
            // Storage: DaoDemocracy ReservePeriod (r:1 w:0)
            // Storage: DaoDemocracy ReserveOf (r:1 w:1)
        fn second() -> Weight {
        (22_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
            // Storage: DaoDemocracy LaunchTag (r:1 w:0)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy LaunchPeriod (r:1 w:0)
            // Storage: DaoDemocracy PublicProps (r:1 w:1)
            // Storage: DaoDemocracy DepositOf (r:1 w:1)
            // Storage: DaoDemocracy VotingPeriod (r:1 w:0)
            // Storage: DaoDemocracy EnactmentPeriod (r:1 w:0)
            // Storage: DaoDemocracy ReferendumCount (r:1 w:1)
            // Storage: DaoDemocracy ReferendumInfoOf (r:0 w:1)
        fn open_table() -> Weight {
        (28_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn vote_for_referendum() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn cancel_vote() -> Weight {
        (17_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: DaoDemocracy MinVoteWeightOf (r:1 w:0)
            // Storage: CreateDao Daos (r:1 w:0)
        fn enact_proposal() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: DaoDemocracy ReserveOf (r:1 w:1)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn unlock() -> Weight {
        (18_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinVoteWeightOf (r:0 w:1)
        fn set_min_vote_weight_for_every_call() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MaxPublicProps (r:0 w:1)
        fn set_max_public_props() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy LaunchPeriod (r:0 w:1)
        fn set_launch_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinimumDeposit (r:0 w:1)
        fn set_minimum_deposit() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy VotingPeriod (r:0 w:1)
        fn set_voting_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy ReservePeriod (r:0 w:1)
        fn set_rerserve_period() -> Weight {
        (11_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy EnactmentPeriod (r:0 w:1)
        fn set_enactment_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: System Account (r:1 w:1)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinimumDeposit (r:1 w:0)
            // Storage: DaoDemocracy PublicPropCount (r:1 w:1)
            // Storage: DaoDemocracy PublicProps (r:1 w:1)
            // Storage: DaoDemocracy MaxPublicProps (r:1 w:0)
            // Storage: DaoDemocracy DepositOf (r:0 w:1)
        fn propose() -> Weight {
        (29_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(6 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoDemocracy DepositOf (r:1 w:1)
            // Storage: System Account (r:1 w:1)
            // Storage: DaoDemocracy ReservePeriod (r:1 w:0)
            // Storage: DaoDemocracy ReserveOf (r:1 w:1)
        fn second() -> Weight {
        (22_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
            // Storage: DaoDemocracy LaunchTag (r:1 w:0)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy LaunchPeriod (r:1 w:0)
            // Storage: DaoDemocracy PublicProps (r:1 w:1)
            // Storage: DaoDemocracy DepositOf (r:1 w:1)
            // Storage: DaoDemocracy VotingPeriod (r:1 w:0)
            // Storage: DaoDemocracy EnactmentPeriod (r:1 w:0)
            // Storage: DaoDemocracy ReferendumCount (r:1 w:1)
            // Storage: DaoDemocracy ReferendumInfoOf (r:0 w:1)
        fn open_table() -> Weight {
        (28_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn vote_for_referendum() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn cancel_vote() -> Weight {
        (17_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
            // Storage: DaoDemocracy ReferendumInfoOf (r:1 w:1)
            // Storage: DaoDemocracy MinVoteWeightOf (r:1 w:0)
            // Storage: CreateDao Daos (r:1 w:0)
        fn enact_proposal() -> Weight {
        (19_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: DaoDemocracy ReserveOf (r:1 w:1)
            // Storage: DaoDemocracy VotesOf (r:1 w:1)
        fn unlock() -> Weight {
        (18_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinVoteWeightOf (r:0 w:1)
        fn set_min_vote_weight_for_every_call() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MaxPublicProps (r:0 w:1)
        fn set_max_public_props() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy LaunchPeriod (r:0 w:1)
        fn set_launch_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy MinimumDeposit (r:0 w:1)
        fn set_minimum_deposit() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy VotingPeriod (r:0 w:1)
        fn set_voting_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy ReservePeriod (r:0 w:1)
        fn set_rerserve_period() -> Weight {
        (11_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: CreateDao Daos (r:1 w:0)
            // Storage: DaoDemocracy EnactmentPeriod (r:0 w:1)
        fn set_enactment_period() -> Weight {
        (12_000_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
    }